openapi: 3.0.3
info:
  title: WASAPhoto APIs
  description: |-
    This is the documentation for the APIs for the WASAPhoto Project,
    for the accademic year 23/24 by Scutigliani Luca (1914401)
  version: 0.0.2

servers:
  - url: wasaphoto.lucascutigliani.it
    description: Production URL
  - url: wasadev.lucascutigliani.it
    description: Development URL

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "JWT"

  schemas:
    UUID:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      minLength: 36
      maxLength: 36

    BearerToken:
      type: string
      pattern: ^Bearer\s[A-Za-z0-9-._~+/]+={0,2}$
      example: Bearer CookEN7QWidlYDjRTH8I~n99YJfqCC==

    ResourceCount:
      type: integer
      min: 0
      example: 42
      readOnly: true

    User:
      type: object
      properties:
        uuid:
          { $ref: "#/components/schemas/UUID" }
        username:
          { $ref: "#/components/schemas/Username" }
        followersCount:
          { $ref: "#/components/schemas/ResourceCount" }
        followingCount:
          { $ref: "#/components/schemas/ResourceCount" }
        photosCount:
          { $ref: "#/components/schemas/ResourceCount" }
        isBanned:
          type: boolean

    Username:
      type: string
      example: maria00
      maxLength: 32
      minLength: 5

    UsersList:
      type: array
      readOnly: true
      items:
        { $ref: "#/components/schemas/Username" }

    ResourceID:
      readOnly: true
      type: integer
      minimum: 0
      example: 1234

    PhotoLike:
      type: object
      properties:
        id:
          { $ref: "#/components/schemas/ResourceID" }
        issuer:
          { $ref: "#/components/schemas/Username" }

    PhotoComment:
      type: object
      properties:
        id:
          { $ref: "#/components/schemas/ResourceID" }
        issuer:
          { $ref: "#/components/schemas/Username" }
        date:
          { $ref: "#/components/schemas/Date" }
        text:
          { $ref: "#/components/schemas/CommentText"}

    Photo:
      type: object
      properties:
        id:
          { $ref: "#/components/schemas/ResourceID" }
        author:
          { $ref: "#/components/schemas/UUID" }
        date:
          { $ref: "#/components/schemas/Date" }
        likesCount:
          type: integer
          minimum: 0
          example: 42
        commentsCount:
          type: integer
          minimum: 0
          example: 42
        liked:
          type: boolean
          example: false

    Date:
      type: string
      format: date-time

    CommentText:
      type: string
      minLength: 1
      example: Nice photo bro!

  parameters:
    userID:
      name: userID
      in: path
      required: true
      description: User UUID
      schema:
        { $ref: "#/components/schemas/UUID" }
    paginationIndex:
      name: paginationIndex
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        example: 2
    photoID:
      name: photoID
      in: path
      required: true
      description: ID of the photo
      schema:
        type: integer
        minimum: 0
        example: 1234
    commentID:
      name: commentID
      in: path
      required: true
      description: ID of the comment
      schema:
        type: integer
        minimum: 0
        example: 1234
    likeID:
      name: likeID
      in: path
      required: true
      description: ID of the like
      schema:
        type: integer
        minimum: 0
        example: 1234

  responses:
    BadRequest:
      description: Bad Request. The request syntax is incorrect.
      content:
        text/plain:
          schema:
            type: string
            example: "Bad Request: Syntax error in the request."
    Unauthorized:
      description: Unauthorized. Authentication is required and has failed or has not been provided.
      content:
        text/plain:
          schema:
            type: string
            example: "Unauthorized: Authentication failed."
    Forbidden:
      description: Forbidden. The user does not have the permissions to perform this action.
      content:
        text/plain:
          schema:
            type: string
            example: "Forbidden: Insufficient permissions to perform this action."
    NotFound:
      description: Not Found. The requested resource could not be found.
      content:
        text/plain:
          schema:
            type: string
            example: "Not Found: The requested resource was not found."
    InternalServerError:
      description: Internal Server Error. A generic error occurred on the server.
      content:
        text/plain:
          schema:
            type: string
            example: "Internal Server Error: A generic error occurred on the server."

paths:
  /session:
    post:
      tags: ["Login"]
      operationId: doLogin
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^[a-zA-Z0-9]*$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '200':
          description: User log-in action successful (user exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    { $ref: "#/components/schemas/UUID" }
                  token:
                    { $ref: "#/components/schemas/BearerToken" }
        '201':
          description: User log-in action successful (user created)
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    { $ref: "#/components/schemas/UUID" }
                  token:
                    { $ref: "#/components/schemas/BearerToken" }
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /users/:
    parameters:
    - name: searchQuery
      in: query
      required: true
      description: User search query
      schema:
        type: string
        maxLength: 32
    get:
      tags: ["Users"]
      operationId: searchUsers
      security:
        - BearerAuth: []
      summary: Search user by partial username
      description: |
        Given a partial username (search query)
        a list of possible matches is returned
        in the response.
      responses:
        '200':
          description: |
            The query has been executed successfully.
            A list of possible matches is in the content.
            If empty, no username matches the query.
          content:
            application/json:
              schema:
                type: object
                properties:
                  usernames:
                    { $ref: "#/components/schemas/UsersList" }
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /users/{userID}:
    parameters:
    - {$ref: "#/components/parameters/userID"}
    get:
      tags: ["Users"]
      operationId: getUserProfile
      security:
        - BearerAuth: []
      summary: Get user profile
      description: |
        Given a user identifier, the user profile
        is returned.

        If the user is not found, an
        error will be returned.
      responses:
        '200':
          description: The user is found and the profile is in the content.
          content:
            application/json:
              schema:
                { $ref: "#/components/schemas/User" }
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /user/{userID}/username:
    parameters:
    - {$ref: "#/components/parameters/userID"}
    put:
      tags: ["Users"]
      operationId: setMyUserName
      security:
        - BearerAuth: []
      summary: Change user username
      description: |
        This can be used to modify the user username
        for a given user identifier.
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        '200':
          description: User username updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    { $ref: "#/components/schemas/Username" }
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /users/{userID}/banned/:
    parameters:
      - { $ref: "#/components/parameters/userID" }
    post:
      tags: ["Users"]
      operationId: banUser
      security:
        - BearerAuth: []
      summary: Ban a user
      description: |
        This endpoint is used to ban a user.
        The banned user (id in request body)
        cannot see nor interact with any of
        the banning user (id in parameters)
        content.

        When the banned user attempts any
        operation on the banning user content
        an error will be returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bannedUser:
                  { $ref: "#/components/schemas/UUID" }
      responses:
        '204':
          description: User banned successfully.
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /users/{userID}/banned/{bannedUserID}:
    parameters:
      - { $ref: "#/components/parameters/userID" }
      - name: bannedUserID
        in: path
        required: true
        description: Banned User UUID
        schema:
          { $ref: "#/components/schemas/UUID" }
    delete:
      tags: ["Users"]
      operationId: unbanUser
      security:
        - BearerAuth: []
      summary: Unban a user
      description: |
        This endpoint is used to unban
        a user.
      responses:
        '204':
          description: The user has been unbanned successfully.
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /users/{userID}/stream:
    parameters:
    - { $ref: "#/components/parameters/userID" }
    get:
      parameters:
        - { $ref: "#/components/parameters/paginationIndex" }
      tags: ["Stream"]
      operationId: getMyStream
      security:
        - BearerAuth: []
      summary: Returns the photo stream via a pagination index
      description: |
        Given a user identifier a stream of photos (images)
        is returned in the response.

        Each response contains the 10 most recent photos.
        To get more images, you must increment the
        "paginationIndex" parameter by 1 and so on until
        the given "paginationLimit".

        If the requested userID does not exist, or the "paginationIndex"
        is bigger than "paginationLimit" an error will be returned.
      responses:
        "200":
          description: The user is found and the stream is the content.
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      { $ref: "#/components/schemas/Photo" }
                  paginationLimit:
                    type: integer
                    minimum: 0
                    example: 4
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /photos/:
    post:
      tags: ["Photos"]
      operationId: uploadPhoto
      security:
        - BearerAuth: []
      summary: Upload a photo
      description: |
        This endpoint is used to upload a photo.
        If an error occurs, a error is returned.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The photo to be uploaded.
                uploader:
                  { $ref: "#/components/schemas/UUID" }
      responses:
        '201':
          description: Photo successfully uploaded, photo id in the content
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoID:
                    { $ref: "#/components/schemas/ResourceID" }
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /photos/{photoID}:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
    delete:
      tags: ["Photos"]
      operationId: deletePhoto
      security:
        - BearerAuth: []
      summary: Delete a photo
      description: |
        This endpoint allows the user to delete
        one of its photos using the ID.
      responses:
        "204":
          description: The photo has been deleted successfully.
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"


  /photos/{photoID}/likes/{userID}:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
      - { $ref: "#/components/parameters/userID" }
    put:
      tags: ["Photos"]
      operationId: likePhoto
      security:
        - BearerAuth: []
      summary: Like a photo
      description: This endpoint is used to like a photo
      responses:
        "201":
          description: Like has been added.
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags: ["Photos"]
      operationId: unlikePhoto
      security:
        - BearerAuth: []
      summary: Unlike a photo
      description: |
        This endpoint is used to remove the
        like from a photo.
      responses:
        '204':
          description: The like has been removed.
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /photos/{photoID}/comments/:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
    get:
      tags: ["Photos"]
      summary: Get photo comments
      operationId: getPhotoComments
      security:
        - BearerAuth: []
      description: |
        This endpoint is used to get the
        comments on a photo.
      responses:
        '200':
          description: Photo found and comments in content
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      { $ref: "#/components/schemas/PhotoComment" }
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /photos/{photoID}/comments/{userID}:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
      - { $ref: "#/components/parameters/userID" }
    post:
      tags: ["Photos"]
      operationId: commentPhoto
      security:
        - BearerAuth: []
      summary: Add a comment
      description: |
        This endpoint is used to
        comment a photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  { $ref: "#/components/schemas/CommentText"}
      responses:
        '201':
          description: Comment created; details in content.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    { $ref: "#/components/schemas/ResourceID" }
                  date:
                    { $ref: "#/components/schemas/Date" }
                  text:
                    { $ref: "#/components/schemas/CommentText"}
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /photos/{photoID}/comments/{userID}/{commentID}:
    parameters:
      - { $ref: "#/components/parameters/commentID" }
      - { $ref: "#/components/parameters/photoID" }
      - { $ref: "#/components/parameters/userID" }
    delete:
      tags: ["Photos"]
      operationId: uncommentPhoto
      security:
        - BearerAuth: []
      summary: Delete a comment
      description: |
        This endpoint is used to remove
        a comment from a photo.
      responses:
        '204':
          description: Comment deleted.
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '500':
          $ref: "#/components/responses/InternalServerError"
