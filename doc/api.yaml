openapi: 3.0.3
info:
  title: WASAPhoto APIs
  description: |-
    This is the documentation for the APIs for the WASAPhoto Project,
    for the accademic year 23/24 by Scutigliani Luca (1914401)
  version: 1.0.0

servers:
  - url: https://wasaphoto.lucascutigliani.it
    description: Production URL
  - url: https://wasadev.lucascutigliani.it
    description: Development URL

tags:
  - name: Login
    description: Paths for authentication
  - name: Users
    description: Path for operations on user data
  - name: Follows
    description: Paths for operations regarding following/unfollowing
  - name: Photos
    description: Paths for operations regarding photos

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "JWT"

  schemas:

    # Auth

    AuthResponse:
      description: Schema for the the response on auth.
      type: object
      properties:
        identifier:
          { $ref: "#/components/schemas/UUID" }
        token:
          { $ref: "#/components/schemas/BearerToken" }
      readOnly: true

    BearerToken:
      description: |
        Token used to fullfil the Bearer Authentication.
        standard.
      type: string
      pattern: ^Bearer\s[A-Za-z0-9-._~+/]+={0,2}$
      example: Bearer CookEN7QWidlYDjRTH8I~n99YJfqCC==

    # Identifiers

    UUID:
      description: |
        Universally unique identifier of the user.
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      minLength: 36
      maxLength: 36

    ResourceID:
      description: Simple resource identifier.
      readOnly: true
      type: integer
      minimum: 0
      example: 1234

    # Counters

    ResourceCount:
      description: Simple resource counter.
      type: integer
      minimum: 0
      example: 42
      readOnly: true

    # User related

    User:
      description: |
        This component is the representation
        of a user of the system.

        It contains the UUID of the user,
        the username, the following/followers/photo
        counters, and whether or not the user is
        banned from the pov of the user executing
        an operation.
      type: object
      properties:
        uuid:
          { $ref: "#/components/schemas/UUID" }
        username:
          { $ref: "#/components/schemas/Username" }
        followersCount:
          { $ref: "#/components/schemas/ResourceCount" }
        followingCount:
          { $ref: "#/components/schemas/ResourceCount" }
        photosCount:
          { $ref: "#/components/schemas/ResourceCount" }
        isBanned:
          description: |
            Flag indicating if this user has been banned
            by the user receiving the object.
          readOnly: true
          type: boolean
      readOnly: true

    Username:
      description: Name of the user.
      type: string
      example: maria00
      pattern: '^[a-zA-Z0-9_]*$'
      maxLength: 16
      minLength: 3

    UsersList:
      description: List of users.
      type: array
      minItems: 0
      maxItems: 20
      items:
        { $ref: "#/components/schemas/User" }
      readOnly: true

    # Photo related

    Photo:
      description: |
        This component is the representation
        of a photo.

        It contains a simple id for the photo,
        the UUID of the author, the date of
        upload, the likes/comments counters
        and whether or not the photo has been
        liked from the pov of the user executing
        an operation.
      type: object
      properties:
        id:
          { $ref: "#/components/schemas/ResourceID" }
        author:
          { $ref: "#/components/schemas/UUID" }
        date:
          { $ref: "#/components/schemas/Date" }
        likesCount:
          description: Counter for photo likes.
          type: integer
          minimum: 0
          example: 42
        commentsCount:
          description: Counter for photo comments.
          type: integer
          minimum: 0
          example: 42
        liked:
          description: |
            Flag indicating if the requesting user has
            liked the photo.
          type: boolean
          example: false
      readOnly: true

    PhotoURL:
      description: Components representing the url of an uploaded photo.
      readOnly: true
      type: string
      pattern: '^https?:\/\/.*\/.*\.(png|gif|webp|jpeg|jpg)\??.*$'
      example: https://wasaphoto.lucascutigliani.it/uploads/1234.png

    PhotoComment:
      description: |
        This component is the representation
        of a photo comment.

        It contains the simple id for the comment,
        the UUID of the issuing user, the date of
        issuing and the text of the comment.
      type: object
      properties:
        id:
          { $ref: "#/components/schemas/ResourceID" }
        issuer:
          { $ref: "#/components/schemas/UUID" }
        date:
          { $ref: "#/components/schemas/Date" }
        text:
          { $ref: "#/components/schemas/CommentText"}
      readOnly: true

    CommentText:
      description: Simple comment text representation.
      type: string
      minLength: 1
      maxLength: 250
      pattern: '^.*$'
      example: Nice photo bro!

    # Misc

    Date:
      description: Simple date representation.
      type: string
      format: date-time
      readOnly: true

  parameters:

    userID:
      name: userID
      in: path
      required: true
      description: User UUID.
      schema:
        { $ref: "#/components/schemas/UUID" }

    paginationIndex:
      name: paginationIndex
      in: query
      required: false
      description: Current page index.
      schema:
        type: integer
        minimum: 0
        example: 2

    photoID:
      name: photoID
      in: path
      required: true
      description: Photo identifier parameter.
      schema:
        { $ref: "#/components/schemas/ResourceID" }

    commentID:
      name: commentID
      in: path
      required: true
      description: Comment identifier parameter.
      schema:
        { $ref: "#/components/schemas/ResourceID" }

    X-Requesting-User-UUID:
      name: X-Requesting-User-UUID
      in: header
      required: true
      description: UUID of the requesting user.
      schema:
        { $ref: "#/components/schemas/UUID" }

  responses:
    BadRequest:
      description: |
        Bad Request. The request syntax is incorrect.
      content:
        text/plain:
          schema:
            description: Specific error message for error 400.
            type: string
            example: |
              Bad Request: Syntax error in the request.
    Unauthorized:
      description: |
        Unauthorized. Authentication is required and
        has failed or has not been provided.
      content:
        text/plain:
          schema:
            description: Specific error message for error 401.
            type: string
            example: |
              Unauthorized: Authentication failed or not provided.
    Forbidden:
      description: |
        Forbidden. The user does not have the
        permissions to perform this action.
      content:
        text/plain:
          schema:
            description: Specific error message for error 403.
            type: string
            example: |
              Forbidden: Insufficient permissions to perform
              this action. You may have tried to perform an
              operation on another user data or tried to
              retrieve data from a user that banned you.
    NotFound:
      description: |
        Not Found. The requested resource could
        not be found.
      content:
        text/plain:
          schema:
            description: Specific error message for error 404.
            type: string
            example: |
              Not Found: The requested resource was not found.
    InternalServerError:
      description: |
        Internal Server Error. A generic error
        occurred on the server.
      content:
        text/plain:
          schema:
            description: Specific error message for error 500.
            type: string
            example: |
              Internal Server Error: A generic error
              occurred on the server.

paths:
  /session:
    post:
      tags: ["Login"]
      operationId: doLogin
      summary: Logs in the user
      description: |-
        This endpoint is used for the authentication
        of the users.

        If the user doesn't exist it will be created.

        Will return a UUID for the user
        and an authentication token.
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              description: Login credentials.
              type: object
              properties:
                name:
                  { $ref: "#/components/schemas/Username" }
      responses:
        '200':
          description: User log-in action successful (user exists)
          content:
            application/json:
              schema:
                { $ref: "#/components/schemas/AuthResponse" }
        '201':
          description: User log-in action successful (user created)
          content:
            application/json:
              schema:
                { $ref: "#/components/schemas/AuthResponse" }
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /users:
    parameters:
      - name: searchQuery
        in: query
        required: true
        description: Partial username search query.
        schema:
          { $ref: "#/components/schemas/Username" }
    get:
      tags: ["Users"]
      operationId: searchUsers
      summary: Search user by partial username
      description: |
        Given a partial username (search query)
        a list of possible matches is returned
        in the response.

        Will be returned at maximum 20 users
        that match the query, sorted by descending
        on the edit distance from the query.
      responses:
        '200':
          description: |
            The query has been executed successfully.
            A list of possible matches is in the content.

            If empty, no username mathing the query is
            found.
          content:
            application/json:
              schema:
                description: Array of users matching the search query.
                type: object
                properties:
                  users:
                    { $ref: "#/components/schemas/UsersList" }
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}:
    parameters:
      - { $ref: "#/components/parameters/userID" }
      - { $ref: "#/components/parameters/X-Requesting-User-UUID" }
    get:
      tags: ["Users"]
      operationId: getUserProfile
      security:
        - BearerAuth: []
      summary: Get user profile
      description: |
        Given a user identifier, the user profile
        is returned.

        If the user is not found, an
        error will be returned.
      responses:
        '200':
          description: |
            The user is found and the user
            details are in the content.
          content:
            application/json:
              schema:
                { $ref: "#/components/schemas/User" }
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/username:
    parameters:
      - { $ref: "#/components/parameters/userID" }
      - { $ref: "#/components/parameters/X-Requesting-User-UUID" }
    put:
      tags: ["Users"]
      operationId: setMyUserName
      security:
        - BearerAuth: []
      summary: Change user username
      description: |
        This can be used to modify the user username
        for a given user identifier.
      requestBody:
        description: |
          The request body should contain
          the new username for the user.
        content:
          application/json:
            schema:
              description: The changed username.
              type: object
              properties:
                username:
                  { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        '204':
          description: User username updated successfully.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/banned/{bannedUserID}:
    parameters:
      - { $ref: "#/components/parameters/userID" }
      - name: bannedUserID
        in: path
        required: true
        description: Banned User UUID
        schema:
          { $ref: "#/components/schemas/UUID" }
    put:
      tags: ["Users"]
      operationId: banUser
      security:
        - BearerAuth: []
      summary: Ban a user
      description: |
        This endpoint is used to ban a user.
        The banned user (id in request body)
        cannot see nor interact with any of
        the banning user (id in parameters)
        content.

        When the banned user attempts any
        operation on the banning user content
        a Forbidden error will be returned.
      responses:
        '204':
          description: User banned successfully.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Users"]
      operationId: unbanUser
      security:
        - BearerAuth: []
      summary: Unban a user
      description: |
        This endpoint is used to unban
        a user.
      responses:
        '204':
          description: The user has been unbanned successfully.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/followers:
    parameters:
      - { $ref: "#/components/parameters/userID" }
    get:
      tags: ["Follows"]
      operationId: getFollowers
      security:
        - BearerAuth: []
      summary: Get user followers
      description: |
        This endpoint is used to get the
        list of users that are following
        the user.
      responses:
        '200':
          description: User found and followers list in content.
          content:
            application/json:
              schema:
                description: Array of users that are following the user
                type: object
                properties:
                  followingUsers:
                    { $ref: "#/components/schemas/UsersList" }
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/following:
    parameters:
      - { $ref: "#/components/parameters/userID" }
    get:
      tags: ["Follows"]
      operationId: getFollowing
      security:
        - BearerAuth: []
      summary: Get following users
      description: |
        This endpoint is used to get the
        list of users the user is following.
      responses:
        '200':
          description: User found and following list in content.
          content:
            application/json:
              schema:
                description: Array of following users.
                type: object
                properties:
                  followedUsers:
                    { $ref: "#/components/schemas/UsersList" }
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/following/{followedID}:
    parameters:
      - { $ref: "#/components/parameters/userID" }
      - name: followedID
        in: path
        description: ID of the followed user
        required: true
        schema:
          { $ref: "#/components/schemas/UUID" }
    put:
      tags: ["Follows"]
      operationId: followUser
      security:
        - BearerAuth: []
      summary: Follow a user
      description: |
        This endpoint is used to "follow" a
        user, meaning that the followed user
        content will be shown is the stream
        of the follower user.
      responses:
        '204':
          description: User followed successfully.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Users"]
      operationId: unfollowUser
      security:
        - BearerAuth: []
      summary: Unfollow a user
      description: |
        This endpoint is used to "unfollow"
        a followed user, meaning that the
        "unfollowed" user content will no
        more be part of the user stream.
      responses:
        '204':
          description: User unfollowed successfully.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/stream:
    parameters:
      - { $ref: "#/components/parameters/userID" }
    get:
      parameters:
        - { $ref: "#/components/parameters/paginationIndex" }
      tags: ["Users"]
      operationId: getMyStream
      security:
        - BearerAuth: []
      summary: Get the user paginated photo stream
      description: |
        Given a user identifier a stream of photos (images)
        is returned in the response.

        Each response contains the 10 most recent photos.
        To get more images, you must increment the
        "paginationIndex" parameter by 1 and so on until
        the given "paginationLimit".

        If the requested userID does not exist, or the "paginationIndex"
        is bigger than "paginationLimit" an error will be returned.
      responses:
        '200':
          description: The user is found and the stream is the content.
          content:
            application/json:
              schema:
                description: |
                  This response contains the photos of the user
                  stream, paginated.
                type: object
                properties:
                  photos:
                    description: Array of photos.
                    type: array
                    minItems: 0
                    maxItems: 10
                    items:
                      { $ref: "#/components/schemas/Photo" }
                  paginationLimit:
                    description: |
                      The paginationLimit represents the maximum
                      value for paginationIndex
                    type: integer
                    minimum: 0
                    example: 4
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /photos:
    post:
      tags: ["Photos"]
      operationId: uploadPhoto
      security:
        - BearerAuth: []
      summary: Upload a photo
      description: |
        This endpoint is used to upload a photo.
        If an error occurs, a error is returned.
      requestBody:
        required: true
        description: |
          The request body should contain
          the image that needs to be uploaded
          in binary format and the UUID of the
          user uploading the photo.
        content:
          multipart/form-data:
            schema:
              description: Data and details of the photo to be uploaded.
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  minLength: 0
                  maxLength: 25000000
                  description: The photo to be uploaded.
                uploader:
                  { $ref: "#/components/schemas/UUID" }
      responses:
        '201':
          description: Photo successfully uploaded, photo id in the content
          headers:
            Location:
              description: |
                URL location of the uploaded image.
              schema:
                { $ref: "#/components/schemas/PhotoURL" }
          content:
            application/json:
              schema:
                description: |
                  ID assigned to the uploaded photo
                type: object
                properties:
                  photoID:
                    { $ref: "#/components/schemas/ResourceID" }
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /photos/{photoID}:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
      - name: userID
        in: header
        required: true
        description: User UUID
        schema:
          { $ref: "#/components/schemas/UUID" }
    delete:
      tags: ["Photos"]
      operationId: deletePhoto
      security:
        - BearerAuth: []
      summary: Delete a photo
      description: |
        This endpoint allows the user to delete
        one of its photos using the ID.
      responses:
        '204':
          description: The photo has been deleted successfully.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /photos/{photoID}/likes/{userID}:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
      - { $ref: "#/components/parameters/userID" }
    put:
      tags: ["Photos"]
      operationId: likePhoto
      security:
        - BearerAuth: []
      summary: Like a photo
      description: This endpoint is used to like a photo
      responses:
        "204":
          description: Like has been added.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Photos"]
      operationId: unlikePhoto
      security:
        - BearerAuth: []
      summary: Unlike a photo
      description: |
        This endpoint is used to remove the
        like from a photo.
      responses:
        '204':
          description: The like has been removed.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /photos/{photoID}/comments:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
    get:
      parameters:
        - { $ref: "#/components/parameters/paginationIndex" }
      tags: ["Photos"]
      summary: Get photo comments
      operationId: getPhotoComments
      security:
        - BearerAuth: []
      description: |
        This endpoint is used to get the
        comments on a photo.

        Each response contains the 10 oldest comments.
        To get more comments, you must increment the
        "paginationIndex" parameter by 1 and so on until
        the given "paginationLimit".
      responses:
        '200':
          description: Photo found and comments in content
          content:
            application/json:
              schema:
                description: |
                  Comments of the required photo.
                type: object
                properties:
                  comments:
                    description: Array of comments.
                    type: array
                    minItems: 0
                    maxItems: 10
                    items:
                      { $ref: "#/components/schemas/PhotoComment" }
                  paginationLimit:
                    description: |
                      The paginationLimit represents the maximum
                      value for paginationIndex.
                    type: integer
                    minimum: 0
                    example: 4
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }
    post:
      tags: [ "Photos" ]
      operationId: commentPhoto
      security:
        - BearerAuth: [ ]
      summary: Add a comment
      description: |
        This endpoint is used to
        comment a photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Details of the comment to create.
              type: object
              properties:
                text:
                  { $ref: "#/components/schemas/CommentText" }
                issuer:
                  { $ref: "#/components/schemas/UUID" }
      responses:
        '201':
          description: Comment created; details in content.
          content:
            application/json:
              schema:
                description: Details of the created comment.
                type: object
                properties:
                  id:
                    { $ref: "#/components/schemas/ResourceID" }
                  date:
                    { $ref: "#/components/schemas/Date" }
                  text:
                    { $ref: "#/components/schemas/CommentText" }
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }

  /photos/{photoID}/comments/{commentID}:
    parameters:
      - { $ref: "#/components/parameters/commentID" }
      - { $ref: "#/components/parameters/photoID" }
    delete:
      parameters:
        - name: userID
          in: header
          required: true
          description: UUID of the requesting user
          schema:
            { $ref: "#/components/schemas/UUID" }
      tags: ["Photos"]
      operationId: uncommentPhoto
      security:
        - BearerAuth: []
      summary: Delete a comment
      description: |
        This endpoint is used to remove
        a comment from a photo.
      responses:
        '204':
          description: Comment deleted.
        '400':
          { $ref: "#/components/responses/BadRequest" }
        '401':
          { $ref: "#/components/responses/Unauthorized" }
        '403':
          { $ref: "#/components/responses/Forbidden" }
        '404':
          { $ref: "#/components/responses/NotFound" }
        '500':
          { $ref: "#/components/responses/InternalServerError" }
