openapi: 3.0.3
info:
  title: WASAPhoto APIs
  description: |-
    This is the documentation for the APIs for the WASAPhoto Project,
    for the accademic year 23/24 by Scutigliani Luca (1914401)
  version: 0.0.2

servers:
  - url: wasaphoto.lucascutigliani.it
    description: Production URL
  - url: wasadev.lucascutigliani.it
    description: Development URL

components:
  schemas:
    uuid:
      type: string
      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      minLength: 36
      maxLength: 36

    User:
      type: object
      properties:
        username:
          { $ref: "#/components/schemas/Username" }
        followers:
          { $ref: "#/components/schemas/UsersList" }
        following:
          { $ref: "#/components/schemas/UsersList" }
        photos:
          readOnly: true
          type: array
          items:
            { $ref: "#/components/schemas/Photo" }

    Username:
      type: string
      example: maria00
      maxLength: 32
      minLength: 5

    UsersList:
      type: array
      readOnly: true
      items:
        { $ref: "#/components/schemas/Username" }

    UserID:
      type: integer
      minimum: 0
      example: 123

    ResourceID:
      readOnly: true
      type: integer
      minimum: 0
      example: 1234

    PhotoLike:
      type: object
      properties:
        id:
          { $ref: "#/components/schemas/ResourceID" }
        issuer:
          { $ref: "#/components/schemas/Username" }

    PhotoComment:
      type: object
      properties:
        id:
          { $ref: "#/components/schemas/ResourceID" }
        issuer:
          { $ref: "#/components/schemas/Username" }
        date:
          { $ref: "#/components/schemas/Date" }
        text:
          { $ref: "#/components/schemas/CommentText"}

    PhotoURL:
      readOnly: true
      type: string
      pattern: '^https?:\/\/.*\/.*\.(png|gif|webp|jpeg|jpg)\??.*$'
      example: https://wasaphoto.lucascutigliani.it/uploads/1234.png

    Photo:
      type: object
      properties:
        id:
          { $ref: "#/components/schemas/ResourceID" }
        url:
          { $ref: "#/components/schemas/PhotoURL" }
        date:
          { $ref: "#/components/schemas/Date" }
        likesCount:
          type: integer
          minimum: 0
          example: 42
        commentsCount:
          type: integer
          minimum: 0
          example: 42
        liked:
          type: boolean
          example: false

    Date:
      type: string
      format: date-time

    CommentText:
      type: string
      minLength: 1
      example: Nice photo bro!

  parameters:
    username:
      name: username
      in: path
      required: true
      schema:
        { $ref: "#/components/schemas/Username" }
    userID:
      name: userID
      in: query
      required: true
      description: User private identifier
      schema:
        { $ref: "#/components/schemas/UserID" }
    paginationIndex:
      name: paginationIndex
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        example: 2
    photoID:
      name: photoID
      in: path
      required: true
      description: ID of the photo
      schema:
        type: integer
        minimum: 0
        example: 1234
    commentID:
      name: commentID
      in: path
      required: true
      description: ID of the comment
      schema:
        type: integer
        minimum: 0
        example: 1234
    likeID:
      name: likeID
      in: path
      required: true
      description: ID of the like
      schema:
        type: integer
        minimum: 0
        example: 1234

paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^[a-zA-Z0-9]*$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: User log-in action successful (user exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    { $ref: "#/components/schemas/UserID" }
        '201':
          description: User log-in action successful (user created)
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    { $ref: "#/components/schemas/UserID" }
  /users/:
    parameters:
    - name: searchQuery
      in: query
      required: true
      schema:
        type: string
    get:
      tags: ["Users"]
      summary: Search user by partial username
      description: |
        Given a partial username (search query)
        a list of possible matches is returned
        in the response.
      operationId: searchUsers
      responses:
        "200":
          description: |
            The query has been executed successfully.
            A list of possible matches is in the content.
            If empty, no username matches the query.
          content:
            application/json:
              schema:
                type: object
                properties:
                  usernames:
                    { $ref: "#/components/schemas/UsersList" }
        "400":
          description: Bad request. Have you submitted all the required parameters?

  /users/{username}:
    parameters:
    - {$ref: "#/components/parameters/username"}
    get:
      tags: ["Users"]
      summary: Get user profile
      description: |
        Given a user identifier, the user profile
        is returned. If the user is not found, an
        error will be returned.
      operationId: getUserProfile
      responses:
        "200":
          description: The user is found and the profile is in the content.
          content:
            application/json:
              schema:
                { $ref: "#/components/schemas/User" }
        "404":
          description: The user identifier is not valid.
    patch:
      parameters:
        - { $ref: "#/components/parameters/userID" }
      tags: ["Users"]
      summary: Change user username
      description: |
        This can be used to modify the user username
        for a given user identifier.
      operationId: setMyUserName
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: maria.00
        required: true
      responses:
        "200":
          description: User username updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    { $ref: "#/components/schemas/Username" }
        "400":
          description: Bad request. Have you submitted all the required parameters?
        "403":
          description: You have no permission to execute this operation.
        "404":
          description: User not found.

  /users/{username}/banned/:
    parameters:
      - { $ref: "#/components/parameters/username" }
      - { $ref: "#/components/parameters/userID" }
    post:
      tags: ["Users"]
      operationId: banUser
      summary: Ban a user
      description: |
        This endpoint is used to ban a user.
        The banned user (id in request body)
        cannot see nor interact with any of
        the banning user (id in parameters)
        content.

        When the banned user attempts any
        operation on the banning user content
        an error will be returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bannedUsername:
                  { $ref: "#/components/schemas/Username" }
      responses:
        "201":
          description: User banned successfully.
        "400":
          description: Invalid request.
        "401":
          description: You have no authorization to perform this action.
        "404":
          description: Banning or banned user not found.

  /users/{username}/banned/{bannedUsername}:
    parameters:
      - { $ref: "#/components/parameters/username" }
      - { $ref: "#/components/parameters/userID" }
      - name: bannedUsername
        in: path
        required: true
        schema:
          { $ref: "#/components/schemas/Username" }
    delete:
      tags: ["Users"]
      operationId: unbanUser
      summary: Unban a user
      description: |
        This endpoint is used to unban
        a user.
      responses:
        "200":
          description: The user has been unbanned successfully
        "400":
          description: Invalid request.
        "401":
          description: You have no authorization to perform this action.
        "404":
          description: Banning or banned user not found.

  /users/{username}/stream:
    parameters:
    - { $ref: "#/components/parameters/username" }
    get:
      parameters:
        - { $ref: "#/components/parameters/paginationIndex" }
      tags: ["Stream"]
      summary: Returns the photo stream via a pagination index
      description: |
        Given a user identifier a stream of photos (images)
        is returned in the response.

        Each response contains the 10 most recent photos.
        To get more images, you must increment the
        "paginationIndex" parameter by 1 and so on until
        the give "paginationLimit".

        If the requested userID does not exist, or the "paginationIndex"
        is bigger than "paginationLimit" an error will be returned.
      operationId: getMyStream
      responses:
        "200":
          description: The user is found and the stream is the content.
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      { $ref: "#/components/schemas/Photo" }
                  paginationLimit:
                    type: integer
                    minimum: 0
                    example: 4
        "400":
          description: |
            The request is not valid. Check your syntax and that
            paginationIndex is less or equal of paginationLimit
        "404":
          description: No user found for the required username.
  /photos/:
    post:
      parameters:
        - { $ref: "#/components/parameters/userID" }
      tags: ["Photos"]
      summary: Upload a photo
      description: |
        This endpoint is used to upload a photo.
        If an error occurs, a error is returned.
      operationId: uploadPhoto
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Photo successfully uploaded, url in the content
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    { $ref: "#/components/schemas/PhotoURL" }
        "400":
          description: An error as occurred. Check image format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The file is not an image.

  /photos/{photoID}:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
    delete:
      tags: ["Photos"]
      parameters:
          - { $ref: "#/components/parameters/userID" }
      operationId: deletePhoto
      summary: Delete a photo
      description: |
        This endpoint allows the user to delete
        one of its photos using the ID.
      responses:
        "204":
          description: The photo has been deleted successfully.
        "404":
          description: Photo not found.

  /photos/{photoID}/likes/:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
      - { $ref: "#/components/parameters/userID" }
    put:
      tags: ["Photos"]
      operationId: likePhoto
      summary: Like a photo
      description: This endpoint is used to like a photo
      responses:
        "201":
          description: Like has been added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  likeID:
                    { $ref: "#/components/schemas/ResourceID" }
        "404":
          description: Photo not found.

  /photos/{photoID}/likes/{likeID}:
    parameters:
      - { $ref: "#/components/parameters/likeID" }
      - { $ref: "#/components/parameters/photoID" }
      - { $ref: "#/components/parameters/userID" }
    delete:
      tags: ["Photos"]
      operationId: unlikePhoto
      summary: Unlike a photo
      description: |
        This endpoint is used to remove the
        like from a photo.
      responses:
        "204":
          description: The like has been removed.
        "404":
          description: Photo not found.

  /photos/{photoID}/comments/:
    parameters:
      - { $ref: "#/components/parameters/photoID" }
    get:
      tags: ["Photos"]
      summary: Get photo comments
      operationId: getPhotoComments
      description: |
        This endpoint is used to get the
        comments on a photo.
      responses:
        "200":
          description: Photo found and comments in content
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      { $ref: "#/components/schemas/PhotoComment" }
    post:
      parameters:
        - { $ref: "#/components/parameters/userID" }
      tags: ["Photos"]
      operationId: commentPhoto
      summary: Add a comment
      description: |
        This endpoint is used to leave
        a comment on a photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  { $ref: "#/components/schemas/CommentText"}
      responses:
        "201":
          description: Comment created; details in content.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    { $ref: "#/components/schemas/ResourceID" }
                  text:
                    { $ref: "#/components/schemas/CommentText"}
        "404":
          description: Photo not found.

  /photos/{photoID}/comments/{commentID}:
    parameters:
      - { $ref: "#/components/parameters/commentID" }
      - { $ref: "#/components/parameters/userID" }
    delete:
      tags: ["Photos"]
      operationId: uncommentPhoto
      summary: Delete a comment
      description: |
        This endpoint is used to remove
        a comment from a photo.
      responses:
        "204":
          description: Comment deleted.
        "404":
          description: Photo not found.
